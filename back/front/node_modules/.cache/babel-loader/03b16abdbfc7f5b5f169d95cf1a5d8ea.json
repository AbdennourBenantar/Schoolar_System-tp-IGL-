{"ast":null,"code":"import { Observer } from '@syncfusion/ej2-base';\nimport * as events from '../base/constant';\nimport { Row } from '../models/row';\nimport { AriaService } from '../services/aria-service';\nimport { Cell } from '../models/cell';\nimport { CellType } from '../base/enum';\nimport { DataUtil } from '@syncfusion/ej2-data';\nexport var gridObserver = new Observer();\n/**\n * BlazorAction is used for performing Blazor related Grid Actions.\n * @hidden\n */\n\nvar BlazorAction =\n/** @class */\nfunction () {\n  function BlazorAction(parent) {\n    this.aria = new AriaService();\n    this.actionArgs = {};\n    this.parent = parent;\n    this.addEventListener();\n  }\n\n  BlazorAction.prototype.addEventListener = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.on('detailclick', this.onDetailRowClick, this);\n    this.parent.on('editsuccess', this.editSuccess, this);\n    this.parent.on('setvisibility', this.setColumnVisibility, this);\n    this.parent.on('offset', this.setServerOffSet, this);\n    this.parent.on(events.modelChanged, this.modelChanged, this);\n  };\n\n  BlazorAction.prototype.removeEventListener = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.off('detailclick', this.onDetailRowClick);\n    this.parent.off('editsuccess', this.editSuccess);\n    this.parent.off('setvisibility', this.setColumnVisibility);\n    this.parent.off('offset', this.setServerOffSet);\n    this.parent.off(events.modelChanged, this.modelChanged);\n  };\n\n  BlazorAction.prototype.getModuleName = function () {\n    return 'blazor';\n  };\n\n  ;\n\n  BlazorAction.prototype.modelChanged = function (args) {\n    this.actionArgs = args;\n    this.parent.currentAction = args;\n  };\n\n  BlazorAction.prototype.editSuccess = function (args) {\n    this.actionArgs = args;\n    this.parent.currentAction = args;\n    this.parent.allowServerDataBinding = true;\n    this.parent.serverDataBind();\n    this.parent.allowServerDataBinding = false;\n  };\n\n  BlazorAction.prototype.onDetailRowClick = function (target) {\n    var gObj = this.parent;\n    var adaptor = 'interopAdaptor';\n    var rIndex = 'rowIndex';\n    var invokeMethodAsync = 'invokeMethodAsync';\n    var tr = target.parentElement;\n    var uid = tr.getAttribute('data-uid');\n    var rowObj = gObj.getRowObjectFromUID(uid);\n    var args = {\n      uid: uid,\n      classList: target.classList[0],\n      index: tr.getAttribute('aria-rowindex'),\n      rowIndex: gObj.getRowsObject().indexOf(rowObj),\n      colSpan: this.parent.getVisibleColumns().length\n    };\n    gObj[adaptor][invokeMethodAsync]('OnDetailClick', args);\n\n    if (target.classList.contains('e-detailrowcollapse')) {\n      var rows = gObj.getRowsObject();\n      var rowData = rowObj.data;\n      var gridRowId = this.parent.getRowUid('grid-row');\n      var len = gObj.groupSettings.columns.length;\n      var gridRow = new Row({\n        isDataRow: true,\n        isExpand: true,\n        uid: gridRowId,\n        isDetailRow: true,\n        cells: [new Cell({\n          cellType: CellType.Indent\n        }), new Cell({\n          isDataCell: true,\n          visible: true\n        })]\n      });\n\n      for (var i = 0; i < len; i++) {\n        gridRow.cells.unshift(new Cell({\n          cellType: CellType.Indent\n        }));\n      }\n\n      rows.splice(args[rIndex] + 1, 0, gridRow);\n      gObj.trigger(events.detailDataBound, {\n        data: rowData\n      });\n      gObj.notify(events.detailDataBound, {\n        rows: gObj.getRowsObject()\n      });\n      rowObj.isExpand = true;\n      this.aria.setExpand(target, true);\n    } else {\n      gObj.getRowsObject().splice(args[rIndex] + 1, 1);\n      gObj.notify(events.detailDataBound, {\n        rows: gObj.getRowsObject()\n      });\n      rowObj.isExpand = false;\n      this.aria.setExpand(target, false);\n    }\n  };\n\n  BlazorAction.prototype.setColumnVisibility = function (columns) {\n    var visible = {};\n    var adaptor = 'interopAdaptor';\n    var invokeMethodAsync = 'invokeMethodAsync';\n    columns.forEach(function (column) {\n      visible[column.uid] = column.visible;\n    });\n    this.parent[adaptor][invokeMethodAsync]('setColumnVisibility', {\n      visible: visible\n    });\n  };\n\n  BlazorAction.prototype.dataSuccess = function (args) {\n    if (args.foreignColumnsData) {\n      var columns = this.parent.getColumns();\n      columns.forEach(function (column) {\n        if (args.foreignColumnsData[column.field]) {\n          column.columnData = args.foreignColumnsData[column.field];\n        }\n      });\n    }\n\n    if (this.parent.allowGrouping && this.parent.groupSettings.columns) {\n      var agg_1 = [];\n      var aggRows = this.parent.aggregates;\n      aggRows.forEach(function (row) {\n        row.columns.forEach(function (col) {\n          var aggr = {};\n          var type = col.type.toString();\n          aggr = {\n            type: type.toLowerCase(),\n            field: col.field\n          };\n          agg_1.push(aggr);\n        });\n      });\n      var data_1;\n      var aggrds_1;\n      var groupedCols = this.parent.groupSettings.columns;\n      groupedCols.forEach(function (field) {\n        aggrds_1 = data_1 ? data_1 : args.result;\n        data_1 = DataUtil.group(aggrds_1, field, agg_1, null, null);\n      });\n      args.result = data_1 ? data_1 : args.result;\n    }\n\n    var rowUid = 'rowUid';\n    var offsetTime = 'offsetTime';\n    var off = 'offset';\n    this.parent[rowUid] = args[rowUid];\n    this.parent[offsetTime] = args[off];\n\n    if (this.parent[offsetTime] !== Math.abs(new Date().getTimezoneOffset() / 60)) {\n      if (this.parent.editSettings.mode !== 'Batch') {\n        var action = 'action';\n        var rowIndex = 'rowIndex';\n        var index = 'index';\n\n        if (this.actionArgs[action] === 'edit') {\n          this.setClientOffSet(args, this.actionArgs[rowIndex]);\n        } else if (this.actionArgs[action] === 'add') {\n          this.setClientOffSet(args, this.actionArgs[index]);\n        }\n      } else if (this.parent.editSettings.mode === 'Batch') {\n        var changes = 'changes';\n        var changedRecords = 'changedRecords';\n        var addedRecords = 'addedRecords';\n        var keyField = this.parent.getPrimaryKeyFieldNames()[0];\n        var batchChanges = this.actionArgs[changes] || {\n          changedRecords: [],\n          addedRecords: []\n        };\n\n        for (var i = 0; i < batchChanges[changedRecords].length; i++) {\n          for (var j = 0; j < args.result.length; j++) {\n            if (batchChanges[changedRecords][i][keyField] === args.result[j][keyField]) {\n              this.setClientOffSet(args, j);\n            }\n          }\n        }\n\n        for (var i = 0; i < batchChanges[addedRecords].length; i++) {\n          for (var j = 0; j < args.result.length; j++) {\n            if (batchChanges[addedRecords][i][keyField] === args.result[j][keyField]) {\n              this.setClientOffSet(args, j);\n            }\n          }\n        }\n      }\n    }\n\n    this.parent.renderModule.dataManagerSuccess(args, this.actionArgs);\n    this.parent.getMediaColumns();\n    this.actionArgs = this.parent.currentAction = {};\n  };\n\n  BlazorAction.prototype.setClientOffSet = function (args, index) {\n    var timeZone = DataUtil.serverTimezoneOffset;\n    DataUtil.serverTimezoneOffset = 0;\n    args.result[index] = DataUtil.parse.parseJson(JSON.stringify(args.result[index]));\n    DataUtil.serverTimezoneOffset = timeZone;\n  };\n\n  BlazorAction.prototype.setServerOffSet = function (args) {\n    var serverTimeZone = DataUtil.serverTimezoneOffset;\n    var offsetTime = 'offsetTime';\n    var data = 'data';\n    var timeZone = new Date().getTimezoneOffset() / 60 * 2 + this.parent[offsetTime];\n    DataUtil.serverTimezoneOffset = timeZone;\n    args[data] = DataUtil.parse.parseJson(JSON.stringify(args[data]));\n    DataUtil.serverTimezoneOffset = serverTimeZone;\n  };\n\n  BlazorAction.prototype.dataFailure = function (args) {\n    this.parent.renderModule.dataManagerFailure(args, this.actionArgs);\n    this.actionArgs = this.parent.currentAction = {};\n  };\n\n  BlazorAction.prototype.destroy = function () {\n    this.removeEventListener();\n  };\n\n  return BlazorAction;\n}();\n\nexport { BlazorAction };","map":null,"metadata":{},"sourceType":"module"}